
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	
	НастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать();
	
	Элементы.Пользователь.СписокВыбора.Добавить(НастройкиЛогирования.ИмяОбщегоВиртуальногоПользователя(), "<<Для всех пользователей (срабатывает,если у пользователя нет своей настройки)>>");
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();	
	Для инд = 0 по МассивПользователейИБ.ВГраница() Цикл
		ПользовательИБ = МассивПользователейИБ.Получить(инд);
		Элементы.Пользователь.СписокВыбора.Добавить(ПользовательИБ.Имя);
	КонецЦикла;	
	Объект.Пользователь = ИмяПользователя();
	
	Элементы.ЖурналыУровень.СписокВыбора.Добавить("DEBUG");
	Элементы.ЖурналыУровень.СписокВыбора.Добавить("INFO");
	Элементы.ЖурналыУровень.СписокВыбора.Добавить("WARN");
	Элементы.ЖурналыУровень.СписокВыбора.Добавить("ERROR");
	Элементы.ЖурналыУровень.СписокВыбора.Добавить("CRITICALERROR");
	Элементы.ЖурналыУровень.СписокВыбора.Добавить("DISABLE");
	
	ПеречитатьНастройкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналыИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораФайла",ЭтотОбъект);
	ДиалогВыбора.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ВыбЗначение,ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбЗначение) Тогда
		Элементы.Журналы.ТекущиеДанные.ИмяФайла = ВыбЗначение[0];
		ПереформироватьНастройки();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНастройкиНаСервере()  
	
	Объект.Журналы.Очистить();
	НастройкиТекстовыйДокумент.Очистить();
	
	НастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать();
	Попытка
		НастройкиЛогирования.ПрочитатьИзКонфигурации();//считываем настройки
	Исключение
		Сообщить("Ошибка чтения имеющиюхся настроек:" + ОписаниеОшибки());
	КонецПопытки;	

	СохраненныйНастройки_ТекстДок = ХранилищеОбщихНастроек.Загрузить(НастройкиЛогирования.КлючНастройкиХранилища());
	Если СохраненныйНастройки_ТекстДок <> Неопределено Тогда
		Попытка
			Для Сч = 1 По СохраненныйНастройки_ТекстДок.КоличествоСтрок() Цикл
				СтрокаНастроек = СохраненныйНастройки_ТекстДок.ПолучитьСтроку(Сч);
				НастройкиТекстовыйДокумент.ДобавитьСтроку(СтрокаНастроек);
			КонецЦикла;
		Исключение
			Сообщить("Ошибка чтения настроек:" + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	СписокИменИспользуемыхВНастройкеЛоггеров = НастройкиЛогирования.ПолучитьСписокИменЛоггеров();
	
	СписокЖурналов = Логгер.СписокЖурналовЛогов();
	Для инд = 0 по СписокЖурналов.Количество() - 1 Цикл
		
		ОписаниеЖурнала = СписокЖурналов.Получить(инд);
		строкаТЧЖурнала = Объект.Журналы.Добавить();
		строкаТЧЖурнала.Имя = ОписаниеЖурнала.Значение;
		строкаТЧЖурнала.Описание = ОписаниеЖурнала.Представление;
		строкаТЧЖурнала.ИмяПотокаВыводЛогаВКонсольЛог=ПолучитьИмяПотокаДляКонсолиПоУмолчанию();
		строкаТЧЖурнала.ИмяПотокаВыводВЖР=ПолучитьИмяПотокаДляЖРПоУмолчанию();
		строкаТЧЖурнала.ИмяПотокаВыводВФайл=ПолучитьИмяПотокаДляФайлаПоУмолчанию();
		
		Если СписокИменИспользуемыхВНастройкеЛоггеров.Найти(строкаТЧЖурнала.Имя) <> Неопределено  Тогда
			СписокИменИспользуемыхВНастройкеЛоггеров.Удалить(СписокИменИспользуемыхВНастройкеЛоггеров.Найти(строкаТЧЖурнала.Имя));
		КонецЕсли;
		
	КонецЦикла;	
	
	//дополнительные логгеры, прописанные в настройках, тоже добавляем
	Для инд = 0 по СписокИменИспользуемыхВНастройкеЛоггеров.ВГраница() Цикл
		
		строкаТЧЖурнала = Объект.Журналы.Добавить();
		строкаТЧЖурнала.Имя = СписокИменИспользуемыхВНастройкеЛоггеров.Получить(инд);
		строкаТЧЖурнала.Описание = СписокИменИспользуемыхВНастройкеЛоггеров.Получить(инд);
		строкаТЧЖурнала.ИмяПотокаВыводЛогаВКонсольЛог=ПолучитьИмяПотокаДляКонсолиПоУмолчанию();
		строкаТЧЖурнала.ИмяПотокаВыводВЖР=ПолучитьИмяПотокаДляЖРПоУмолчанию();
		строкаТЧЖурнала.ИмяПотокаВыводВФайл=ПолучитьИмяПотокаДляФайлаПоУмолчанию();
		
	КонецЦикла;	

	
	Если НастройкиТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
		
		УровниЛога = Новый Соответствие;
		УровниЛога.Вставить(0,"DEBUG");
		УровниЛога.Вставить(1, "INFO");
		УровниЛога.Вставить(2,"WARN");
		УровниЛога.Вставить(3,"ERROR");
		УровниЛога.Вставить(4,"CRITICALERROR");
		УровниЛога.Вставить(5,"DISABLE"      );
		
		
		//установим настройки
		
			Для инд = 0 по Объект.Журналы.Количество() - 1 Цикл
				строкаТЧЖурнала = Объект.Журналы.Получить(инд);
				
				НастройкиЛога = НастройкиЛогирования.Получить(строкаТЧЖурнала.Имя);
				строкаТЧЖурнала.ОтключитьВключить = НастройкиЛога <> Неопределено;
				
				Если НастройкиЛога <> Неопределено Тогда
					строкаТЧЖурнала.Уровень = УровниЛога.Получить(НастройкиЛога.Уровень);
					Для каждого СпособВывода из НастройкиЛога.СпособыВывода Цикл
						Если СпособВывода.Значение.Класс = ИмяВыводаВКонсоль() Тогда
							строкаТЧЖурнала.ВыводЛогаВКонсольЛог = Истина;
							строкаТЧЖурнала.ИмяПотокаВыводЛогаВКонсольЛог = СпособВывода.Ключ;
						ИначеЕсли  СпособВывода.Значение.Класс = ИмяВыводаВЖР() Тогда
							строкаТЧЖурнала.ВыводЛогаВЖРЛог = Истина;
							строкаТЧЖурнала.ИмяПотокаВыводВЖР = СпособВывода.Ключ;
						ИначеЕсли СпособВывода.Значение.Класс = ИмяВыводаВФайла() Тогда
							строкаТЧЖурнала.ВыводЛогаВФайлЛог = Истина;
							строкаТЧЖурнала.ИмяПотокаВыводВФайл = СпособВывода.Ключ;
							строкаТЧЖурнала.ИмяФайла = СпособВывода.Значение.Свойства.Получить("file");
						КонецЕсли;	
					КонецЦикла;	
					
				КонецЕсли	
				
			КонецЦикла;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьНастройки(Команда)
	ПеречитатьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЖурналыПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	ПереформироватьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьНастройки()
	
	НастройкиТекстовыйДокумент.Очистить();
	
	Для инд = 0 по Объект.Журналы.Количество() - 1 Цикл
		строкаТЧ = Объект.Журналы.Получить(инд);
		НастройкиТекстовыйДокумент.ДобавитьСтроку(СформироватьНастройкуПоСтрокеЛога(строкаТЧ));
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьНастройкуПоСтрокеЛога(ТекДанныеСтроки)
	
	СтрНастройка = "";
	
	Если ТекДанныеСтроки.ОтключитьВключить = Ложь Тогда
		Возврат СтрНастройка;
	КонецЕсли;
	
	Если ТекДанныеСтроки.Уровень = "" Тогда
		ТекДанныеСтроки.Уровень = "DEBUG";
	КонецЕсли;	
	
	СтрНастройка = "##"+ТекДанныеСтроки.Имя + " - " + ТекДанныеСтроки.Описание;
	СтрНастройка = СтрНастройка + Символы.ПС;
	СтрНастройка = СтрНастройка + "logger." + ТекДанныеСтроки.Имя+ "="+ТекДанныеСтроки.Уровень;
	
	ДопПараметры = "";
	
	ОписаниеАппендеровПотока = Новый Структура;
	
	Если ТекДанныеСтроки.ВыводЛогаВКонсольЛог Тогда
		
		Поток= ТекДанныеСтроки.ИмяПотокаВыводЛогаВКонсольЛог;
		ДопПараметры = ДопПараметры + "," + Поток;
		
		Аппендеры = "appender."+Поток+"=" + ИмяВыводаВКонсоль();
		//Аппендеры = Аппендеры + Символы.ПС + "appender."; другие расширения аппендера;
		
		ОписаниеАппендеровПотока.Вставить(Поток, Аппендеры);
		
	КонецЕсли;	
	
	
	Если ТекДанныеСтроки.ВыводЛогаВЖРЛог Тогда
		
		Поток= ТекДанныеСтроки.ИмяПотокаВыводВЖР;
		ДопПараметры = ДопПараметры + "," + Поток;
		
		Аппендеры = "appender."+Поток+"=" + ИмяВыводаВЖР();
		//Аппендеры = Аппендеры + Символы.ПС + "appender."; другие расширения аппендера;
		
		ОписаниеАппендеровПотока.Вставить(Поток, Аппендеры);
		
	КонецЕсли;	
	
	Если ТекДанныеСтроки.ВыводЛогаВФайлЛог Тогда
		
		Поток= ТекДанныеСтроки.ИмяПотокаВыводВФайл;
		ДопПараметры = ДопПараметры + "," + Поток;
		
		Аппендеры = "appender."+Поток+"=" + ИмяВыводаВФайла();
		Аппендеры = Аппендеры + Символы.ПС + "appender."+Поток + ".file="+ТекДанныеСтроки.ИмяФайла;
		
		ОписаниеАппендеровПотока.Вставить(Поток, Аппендеры);
		
	КонецЕсли;
	
	//формирование итоговой настройки по журналу
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		
		СтрНастройка = СтрНастройка + ДопПараметры;
		
		Для каждого КлЗнч из ОписаниеАппендеровПотока Цикл
			
			СтрНастройка = СтрНастройка + Символы.ПС;
			
			СтрНастройка = СтрНастройка + Символы.ПС;
			
			СтрНастройка = СтрНастройка + КлЗнч.Значение;
			
			
		КонецЦикла;	
		
		
	КонецЕсли;	
	
	СтрНастройка = СтрНастройка + Символы.ПС;
	
	Возврат СтрНастройка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ИмяВыводаВКонсоль()
	
	Возврат "ВыводЛогаВКонсоль";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ИмяВыводаВЖР()
	
	Возврат "ВыводЛогаВЖР";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВыводаВФайла()
	
	Возврат "ВыводЛогаВФайл";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьИмяПотокаДляКонсолиПоУмолчанию()
	
	Возврат "console";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьИмяПотокаДляЖРПоУмолчанию()
	
	Возврат "journal";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПотокаДляФайлаПоУмолчанию()
	
	Возврат "fileOutput";
	
КонецФункции

#Область СохранениеУдалениеНастроек

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервереНастройкуПользователя(Объект.Пользователь);
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервереНастройкуПользователя(ПользовательНастройки)
	// Вставить содержимое обработчика.
	НастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать();
	Если НастройкиТекстовыйДокумент.КоличествоСтрок() = 0 Тогда
		ХранилищеОбщихНастроек.Сохранить(НастройкиЛогирования.КлючНастройкиХранилища(), , Неопределено, , ПользовательНастройки);
	Иначе	
		ХранилищеОбщихНастроек.Сохранить(НастройкиЛогирования.КлючНастройкиХранилища(), , НастройкиТекстовыйДокумент, , ПользовательНастройки);
	КонецЕсли;	
	Логгер.МенеджерЛогов().ОбновитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ОчиститьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	// Вставить содержимое обработчика.
	НастройкиТекстовыйДокумент.Очистить();
	ЗаписатьНаСервереНастройкуПользователя(Объект.Пользователь);
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеНастройкиНаСервере()
	// Вставить содержимое обработчика.
	
	НастройкиТекстовыйДокумент.Очистить();
	
	НастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать();
	ЗаписатьНаСервереНастройкуПользователя(НастройкиЛогирования.ИмяОбщегоВиртуальногоПользователя());
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();	
	Для инд = 0 по МассивПользователейИБ.ВГраница() Цикл
		ПользовательИБ = МассивПользователейИБ.Получить(инд);
		ЗаписатьНаСервереНастройкуПользователя(ПользовательИБ.Имя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеНастройки(Команда)
	ОчиститьВсеНастройкиНаСервере();
КонецПроцедуры

#КонецОбласти




