//////////////////////////////////////////////////////////////////////////
//
// LOGOS: реализация логирования в стиле log4j для OneScript
//
//////////////////////////////////////////////////////////////////////////

Перем мСозданныеЛоги;
Перем мИдентификаторыЛогов;
Перем мНастройкиЛогирования;

Перем ВестиУчетУровняВложенностиВызовов;
Перем ТекущийУровеньВложенностиВызовов;
Перем ДетализироватьКоллекции;


//////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьЛог(Знач ИмяЛога) Экспорт

	Если ИмяЛога = ИмяКорневогоЛога() Тогда
		ВызватьИсключение СтрШаблон("Имя %1 зарезервировано в подсистеме логирования и не должно использоваться явно.", ИмяЛога);
	КонецЕсли;

	Если мНастройкиЛогирования = Неопределено Тогда
		ОбновитьНастройки();
	КонецЕсли;

	ОписаниеЛога = мСозданныеЛоги[ИмяЛога];
	Если ОписаниеЛога = Неопределено Тогда
		ОписаниеЛога = НовыйДескрипторЛога();
		ОписаниеЛога.Объект = Обработки.ИсполнительЛог.Создать(); //Новый Лог();
		мСозданныеЛоги[ИмяЛога] = ОписаниеЛога;
		мИдентификаторыЛогов[ОписаниеЛога.Объект.ПолучитьИдентификатор()] = ИмяЛога;
		НастроитьЛог(ИмяЛога, ОписаниеЛога.Объект);
	КонецЕсли;
	
	ОписаниеЛога.СчетчикСсылок = ОписаниеЛога.СчетчикСсылок + 1;
	
	Возврат ОписаниеЛога.Объект;

КонецФункции

Процедура ЗакрытьЛог(Знач ОбъектЛога) Экспорт

	Идентификатор = ОбъектЛога.ПолучитьИдентификатор();
	ИмяЛога = мИдентификаторыЛогов[Идентификатор];
	Если ИмяЛога = Неопределено Тогда
		ОбъектЛога.Закрыть(); // Лог не создавался менеджером
		Возврат;
	КонецЕсли;
	
	ОписаниеЛога = мСозданныеЛоги[ИмяЛога];
	Если ОписаниеЛога <> Неопределено Тогда
		ОписаниеЛога.СчетчикСсылок = ОписаниеЛога.СчетчикСсылок - 1;
		Если ОписаниеЛога.СчетчикСсылок <= 0 Тогда
			ОписаниеЛога.Объект.Закрыть();
			мСозданныеЛоги.Удалить(ИмяЛога);
			мИдентификаторыЛогов.Удалить(Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНастройки() Экспорт
	
	ИспользоватьУровниВложенностиВызовов(Ложь);
	УстановитьДетализациюКоллекций(Ложь);
	
	мНастройкиЛогирования = Обработки.НастройкиЛогированияЛог.Создать(); //Новый НастройкиЛогирования();
	мНастройкиЛогирования.ПрочитатьИзКонфигурации();
	
	//если уже были созданы логи нужно обновить их настройки
	Для каждого ОписаниеЛога из мСозданныеЛоги Цикл
		ОписаниеЛога.Значение.Объект.Закрыть();
		НастроитьЛог(ОписаниеЛога.Ключ, ОписаниеЛога.Значение.Объект);
	КонецЦикла;
	
	//КонфигИзСреды = ПолучитьПеременнуюСреды("LOGOS_CONFIG");
	//Если ЗначениеЗаполнено(КонфигИзСреды) Тогда
	//	КонфигИзСреды = СтрЗаменить(КонфигИзСреды, ";", Символы.ПС);
	//	мНастройкиЛогирования.ПрочитатьИзСтроки(КонфигИзСреды);
	//Иначе
	//	КаталогКонфига = СтартовыйСценарий().Каталог;
	//	ФайлКонфига = Новый Файл(ОбъединитьПути(КаталогКонфига, "logos.cfg"));
	//	Если ФайлКонфига.Существует() Тогда
	//		мНастройкиЛогирования.Прочитать(ФайлКонфига.ПолноеИмя);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ИспользоватьУровниВложенностиВызовов(Значение) Экспорт
	
	Если Значение = Истина Тогда
		ВестиУчетУровняВложенностиВызовов = Истина;
	Иначе
		ВестиУчетУровняВложенностиВызовов = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Функция ТекущийУровеньВложенностиВызовов() Экспорт
	Если ВестиУчетУровняВложенностиВызовов Тогда //если не устанавливали явно уровень вложенности значит не использует эту систему
		Возврат ТекущийУровеньВложенностиВызовов;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции

Процедура УстановитьТекущийУровеньВложенностиВызовов(УровеньВложенностиВызовов) Экспорт
	Если ВестиУчетУровняВложенностиВызовов Тогда
		ТекущийУровеньВложенностиВызовов = УровеньВложенностиВызовов;	
	КонецЕсли;	
КонецПроцедуры	

Процедура УстановитьСледующийУровеньВложенностиВызовов() Экспорт
	Если ВестиУчетУровняВложенностиВызовов Тогда
		ТекущийУровеньВложенностиВызовов = ТекущийУровеньВложенностиВызовов + 1;	
	КонецЕсли;	
КонецПроцедуры	

Процедура УстановитьПредыдущийУровеньВложенностиВызовов() Экспорт
	Если ВестиУчетУровняВложенностиВызовов Тогда
		ТекущийУровеньВложенностиВызовов = ТекущийУровеньВложенностиВызовов - 1;	
	КонецЕсли;	
КонецПроцедуры	

Процедура УстановитьДетализациюКоллекций(УровеньДетализацииКоллекцции) Экспорт
	ДетализироватьКоллекции = УровеньДетализацииКоллекцции;	
КонецПроцедуры	

Функция ПолучитьДетализациюКоллекций() Экспорт
	Возврат ДетализироватьКоллекции;
КонецФункции






//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОДУЛЯ

Процедура НастроитьЛог(Знач ИмяЛога, Знач ОбъектЛога)
	
	ОбъектЛога.ИмяЛога = ИмяЛога;
	
	КорневаяНастройка = мНастройкиЛогирования.Получить(ИмяКорневогоЛога());
	ПрименитьНастройку(ОбъектЛога, КорневаяНастройка);

	Настройка = мНастройкиЛогирования.Получить(ИмяЛога);
	ПрименитьНастройку(ОбъектЛога, Настройка);
	
КонецПроцедуры

Процедура ПрименитьНастройку(Знач ОбъектЛога, Знач Настройка)
	
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Настройка.Уровень <> Неопределено Тогда
		ОбъектЛога.УстановитьУровень(Настройка.Уровень);
	КонецЕсли;

	Для Каждого СпособВывода Из Настройка.СпособыВывода Цикл
		Описание = СпособВывода.Значение;
		ОбъектСпособаВывода = Обработки[Описание.Класс + "Лог"].Создать(); //Новый(Описание.Класс);
		Для Каждого КлючИЗначение Из Описание.Свойства Цикл
			ОбъектСпособаВывода.УстановитьСвойство(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ОбъектЛога.ДобавитьСпособВывода(ОбъектСпособаВывода);
	КонецЦикла;

КонецПроцедуры

Функция НовыйДескрипторЛога()
	
	Описание = Новый Структура;
	Описание.Вставить("Объект", Неопределено);
	Описание.Вставить("СчетчикСсылок", 0);
	
	Возврат Описание;
	
КонецФункции

Процедура Инициализация()

	мСозданныеЛоги = Новый Соответствие;
	мИдентификаторыЛогов = Новый Соответствие;
	
	ВестиУчетУровняВложенностиВызовов = Ложь;
	ТекущийУровеньВложенностиВызовов = 0;
	мИдентификатор = Новый УникальныйИдентификатор;
	ДетализироватьКоллекции = Ложь;

КонецПроцедуры

Функция ИмяКорневогоЛога()
	Возврат "rootLogger";
КонецФункции

///////////////////////////////////////////////////////////////////////////

Инициализация();